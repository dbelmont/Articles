//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer for SQL Server tool using LINQ to SQL template.
// Code is generated on: 21/11/2017 6:32:16 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DbContext
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "NORTHWND")]
    public partial class DbDataContext : System.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new System.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();

        partial void InsertCategories(Categories instance);
        partial void UpdateCategories(Categories instance);
        partial void DeleteCategories(Categories instance);
        partial void InsertCustomerCustomerDemo(CustomerCustomerDemo instance);
        partial void UpdateCustomerCustomerDemo(CustomerCustomerDemo instance);
        partial void DeleteCustomerCustomerDemo(CustomerCustomerDemo instance);
        partial void InsertCustomerDemographics(CustomerDemographics instance);
        partial void UpdateCustomerDemographics(CustomerDemographics instance);
        partial void DeleteCustomerDemographics(CustomerDemographics instance);
        partial void InsertCustomers(Customers instance);
        partial void UpdateCustomers(Customers instance);
        partial void DeleteCustomers(Customers instance);
        partial void InsertEmployees(Employees instance);
        partial void UpdateEmployees(Employees instance);
        partial void DeleteEmployees(Employees instance);
        partial void InsertEmployeeTerritories(EmployeeTerritories instance);
        partial void UpdateEmployeeTerritories(EmployeeTerritories instance);
        partial void DeleteEmployeeTerritories(EmployeeTerritories instance);
        partial void InsertOrderDetails(OrderDetails instance);
        partial void UpdateOrderDetails(OrderDetails instance);
        partial void DeleteOrderDetails(OrderDetails instance);
        partial void InsertOrders(Orders instance);
        partial void UpdateOrders(Orders instance);
        partial void DeleteOrders(Orders instance);
        partial void InsertProducts(Products instance);
        partial void UpdateProducts(Products instance);
        partial void DeleteProducts(Products instance);
        partial void InsertRegion(Region instance);
        partial void UpdateRegion(Region instance);
        partial void DeleteRegion(Region instance);

        #endregion

        public DbDataContext() :
        base(GetConnectionString("NORTHWNDDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DbDataContext(System.Data.Linq.Mapping.MappingSource mappingSource) :
        base(GetConnectionString("NORTHWNDDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName) 
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DbDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DbDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public System.Data.Linq.Table<Categories> Categories
        {
            get
            {
                return this.GetTable<Categories>();
            }
        }

        public System.Data.Linq.Table<CustomerCustomerDemo> CustomerCustomerDemo
        {
            get
            {
                return this.GetTable<CustomerCustomerDemo>();
            }
        }

        public System.Data.Linq.Table<CustomerDemographics> CustomerDemographics
        {
            get
            {
                return this.GetTable<CustomerDemographics>();
            }
        }

        public System.Data.Linq.Table<Customers> Customers
        {
            get
            {
                return this.GetTable<Customers>();
            }
        }

        public System.Data.Linq.Table<Employees> Employees
        {
            get
            {
                return this.GetTable<Employees>();
            }
        }

        public System.Data.Linq.Table<EmployeeTerritories> EmployeeTerritories
        {
            get
            {
                return this.GetTable<EmployeeTerritories>();
            }
        }

        public System.Data.Linq.Table<OrderDetails> OrderDetails
        {
            get
            {
                return this.GetTable<OrderDetails>();
            }
        }

        public System.Data.Linq.Table<Orders> Orders
        {
            get
            {
                return this.GetTable<Orders>();
            }
        }

        public System.Data.Linq.Table<Products> Products
        {
            get
            {
                return this.GetTable<Products>();
            }
        }

        public System.Data.Linq.Table<Region> Region
        {
            get
            {
                return this.GetTable<Region>();
            }
        }
    }
}

namespace DbContext
{

    /// <summary>
    /// There are no comments for DbContext.Categories in the schema.
    /// </summary>
    [Table(Name = @"dbo.Categories")]
    public partial class Categories : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryID;

        private string _CategoryName;

        private string _Description;

        private byte[] _Picture;
        #pragma warning restore 0649

        private EntitySet<Products> _Products;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPictureChanging(byte[] value);
        partial void OnPictureChanged();
        #endregion

        public Categories()
        {
            this._Products = new EntitySet<Products>(new Action<Products>(this.attach_Products), new Action<Products>(this.detach_Products));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryID in the schema.
        /// </summary>
        [Column(Storage = "_CategoryID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging("CategoryID");
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Storage = "_CategoryName", CanBeNull = false, DbType = "nvarchar(15) NOT NULL")]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging("CategoryName");
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "nvarchar(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Picture in the schema.
        /// </summary>
        [Column(Storage = "_Picture", DbType = "varbinary(MAX)", UpdateCheck = UpdateCheck.Never)]
        public byte[] Picture
        {
            get
            {
                return this._Picture;
            }
            set
            {
                if (this._Picture != value)
                {
                    this.OnPictureChanging(value);
                    this.SendPropertyChanging("Picture");
                    this._Picture = value;
                    this.SendPropertyChanged("Picture");
                    this.OnPictureChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Association(Name="Categories_Products", Storage="_Products", ThisKey="CategoryID", OtherKey="CategoryID", DeleteRule="NO ACTION")]
        public EntitySet<Products> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Products entity)
        {
            this.SendPropertyChanging();
            entity.Categories = this;
        }
    
        private void detach_Products(Products entity)
        {
            this.SendPropertyChanging();
            entity.Categories = null;
        }
    }

    /// <summary>
    /// There are no comments for DbContext.CustomerCustomerDemo in the schema.
    /// </summary>
    [Table(Name = @"dbo.CustomerCustomerDemos")]
    public partial class CustomerCustomerDemo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CustomerID;

        private string _CustomerTypeID;
        #pragma warning restore 0649

        private EntityRef<CustomerDemographics> _CustomerDemographics;

        private EntityRef<Customers> _Customers;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIDChanging(string value);
        partial void OnCustomerIDChanged();
        partial void OnCustomerTypeIDChanging(string value);
        partial void OnCustomerTypeIDChanged();
        #endregion

        public CustomerCustomerDemo()
        {
            this._CustomerDemographics  = default(EntityRef<CustomerDemographics>);
            this._Customers  = default(EntityRef<Customers>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerID in the schema.
        /// </summary>
        [Column(Storage = "_CustomerID", CanBeNull = false, DbType = "nchar(5) NOT NULL", IsPrimaryKey = true)]
        public string CustomerID
        {
            get
            {
                return this._CustomerID;
            }
            set
            {
                if (this._CustomerID != value)
                {
                    if (this._Customers.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging("CustomerID");
                    this._CustomerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerTypeID in the schema.
        /// </summary>
        [Column(Storage = "_CustomerTypeID", CanBeNull = false, DbType = "nchar(10) NOT NULL", IsPrimaryKey = true)]
        public string CustomerTypeID
        {
            get
            {
                return this._CustomerTypeID;
            }
            set
            {
                if (this._CustomerTypeID != value)
                {
                    if (this._CustomerDemographics.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerTypeIDChanging(value);
                    this.SendPropertyChanging("CustomerTypeID");
                    this._CustomerTypeID = value;
                    this.SendPropertyChanged("CustomerTypeID");
                    this.OnCustomerTypeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerDemographics in the schema.
        /// </summary>
        [Association(Name="CustomerDemographics_CustomerCustomerDemo", Storage="_CustomerDemographics", ThisKey="CustomerTypeID", OtherKey="CustomerTypeID", IsForeignKey=true)]
        public CustomerDemographics CustomerDemographics
        {
            get
            {
                return this._CustomerDemographics.Entity;
            }
            set
            {
                CustomerDemographics previousValue = this._CustomerDemographics.Entity;
                if ((previousValue != value) || (this._CustomerDemographics.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CustomerDemographics");
                    if (previousValue != null)
                    {
                        this._CustomerDemographics.Entity = null;
                        previousValue.CustomerCustomerDemo.Remove(this);
                    }
                    this._CustomerDemographics.Entity = value;
                    if (value != null)
                    {
                        this._CustomerTypeID = value.CustomerTypeID;
                        value.CustomerCustomerDemo.Add(this);
                    }
                    else
                    {
                        this._CustomerTypeID = default(string);
                    }
                    this.SendPropertyChanged("CustomerDemographics");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Customers in the schema.
        /// </summary>
        [Association(Name="Customers_CustomerCustomerDemo", Storage="_Customers", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
        public Customers Customers
        {
            get
            {
                return this._Customers.Entity;
            }
            set
            {
                Customers previousValue = this._Customers.Entity;
                if ((previousValue != value) || (this._Customers.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Customers");
                    if (previousValue != null)
                    {
                        this._Customers.Entity = null;
                        previousValue.CustomerCustomerDemo.Remove(this);
                    }
                    this._Customers.Entity = value;
                    if (value != null)
                    {
                        this._CustomerID = value.CustomerID;
                        value.CustomerCustomerDemo.Add(this);
                    }
                    else
                    {
                        this._CustomerID = default(string);
                    }
                    this.SendPropertyChanged("Customers");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DbContext.CustomerDemographics in the schema.
    /// </summary>
    [Table(Name = @"dbo.CustomerDemographics")]
    public partial class CustomerDemographics : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CustomerTypeID;

        private string _CustomerDesc;
        #pragma warning restore 0649

        private EntitySet<CustomerCustomerDemo> _CustomerCustomerDemo;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerTypeIDChanging(string value);
        partial void OnCustomerTypeIDChanged();
        partial void OnCustomerDescChanging(string value);
        partial void OnCustomerDescChanged();
        #endregion

        public CustomerDemographics()
        {
            this._CustomerCustomerDemo = new EntitySet<CustomerCustomerDemo>(new Action<CustomerCustomerDemo>(this.attach_CustomerCustomerDemo), new Action<CustomerCustomerDemo>(this.detach_CustomerCustomerDemo));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerTypeID in the schema.
        /// </summary>
        [Column(Storage = "_CustomerTypeID", CanBeNull = false, DbType = "nchar(10) NOT NULL", IsPrimaryKey = true)]
        public string CustomerTypeID
        {
            get
            {
                return this._CustomerTypeID;
            }
            set
            {
                if (this._CustomerTypeID != value)
                {
                    this.OnCustomerTypeIDChanging(value);
                    this.SendPropertyChanging("CustomerTypeID");
                    this._CustomerTypeID = value;
                    this.SendPropertyChanged("CustomerTypeID");
                    this.OnCustomerTypeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerDesc in the schema.
        /// </summary>
        [Column(Storage = "_CustomerDesc", DbType = "nvarchar(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string CustomerDesc
        {
            get
            {
                return this._CustomerDesc;
            }
            set
            {
                if (this._CustomerDesc != value)
                {
                    this.OnCustomerDescChanging(value);
                    this.SendPropertyChanging("CustomerDesc");
                    this._CustomerDesc = value;
                    this.SendPropertyChanged("CustomerDesc");
                    this.OnCustomerDescChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerCustomerDemo in the schema.
        /// </summary>
        [Association(Name="CustomerDemographics_CustomerCustomerDemo", Storage="_CustomerCustomerDemo", ThisKey="CustomerTypeID", OtherKey="CustomerTypeID", DeleteRule="NO ACTION")]
        public EntitySet<CustomerCustomerDemo> CustomerCustomerDemo
        {
            get
            {
                return this._CustomerCustomerDemo;
            }
            set
            {
                this._CustomerCustomerDemo.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CustomerCustomerDemo(CustomerCustomerDemo entity)
        {
            this.SendPropertyChanging();
            entity.CustomerDemographics = this;
        }
    
        private void detach_CustomerCustomerDemo(CustomerCustomerDemo entity)
        {
            this.SendPropertyChanging();
            entity.CustomerDemographics = null;
        }
    }

    /// <summary>
    /// There are no comments for DbContext.Customers in the schema.
    /// </summary>
    [Table(Name = @"dbo.Customers")]
    public partial class Customers : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CustomerID;

        private string _CompanyName;

        private string _ContactName;

        private string _ContactTitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _Phone;

        private string _Fax;
        #pragma warning restore 0649

        private EntitySet<CustomerCustomerDemo> _CustomerCustomerDemo;

        private EntitySet<Orders> _Orders;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIDChanging(string value);
        partial void OnCustomerIDChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnContactNameChanging(string value);
        partial void OnContactNameChanged();
        partial void OnContactTitleChanging(string value);
        partial void OnContactTitleChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        #endregion

        public Customers()
        {
            this._CustomerCustomerDemo = new EntitySet<CustomerCustomerDemo>(new Action<CustomerCustomerDemo>(this.attach_CustomerCustomerDemo), new Action<CustomerCustomerDemo>(this.detach_CustomerCustomerDemo));
            this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerID in the schema.
        /// </summary>
        [Column(Storage = "_CustomerID", CanBeNull = false, DbType = "nchar(5) NOT NULL", IsPrimaryKey = true)]
        public string CustomerID
        {
            get
            {
                return this._CustomerID;
            }
            set
            {
                if (this._CustomerID != value)
                {
                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging("CustomerID");
                    this._CustomerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyName in the schema.
        /// </summary>
        [Column(Storage = "_CompanyName", CanBeNull = false, DbType = "nvarchar(40) NOT NULL")]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging("CompanyName");
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactName in the schema.
        /// </summary>
        [Column(Storage = "_ContactName", DbType = "nvarchar(30)")]
        public string ContactName
        {
            get
            {
                return this._ContactName;
            }
            set
            {
                if (this._ContactName != value)
                {
                    this.OnContactNameChanging(value);
                    this.SendPropertyChanging("ContactName");
                    this._ContactName = value;
                    this.SendPropertyChanged("ContactName");
                    this.OnContactNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactTitle in the schema.
        /// </summary>
        [Column(Storage = "_ContactTitle", DbType = "nvarchar(30)")]
        public string ContactTitle
        {
            get
            {
                return this._ContactTitle;
            }
            set
            {
                if (this._ContactTitle != value)
                {
                    this.OnContactTitleChanging(value);
                    this.SendPropertyChanging("ContactTitle");
                    this._ContactTitle = value;
                    this.SendPropertyChanged("ContactTitle");
                    this.OnContactTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Storage = "_Address", DbType = "nvarchar(60)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Storage = "_City", DbType = "nvarchar(15)")]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging("City");
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Column(Storage = "_Region", DbType = "nvarchar(15)")]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging("Region");
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostalCode in the schema.
        /// </summary>
        [Column(Storage = "_PostalCode", DbType = "nvarchar(10)")]
        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if (this._PostalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging("PostalCode");
                    this._PostalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Storage = "_Country", DbType = "nvarchar(15)")]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging("Country");
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Storage = "_Phone", DbType = "nvarchar(24)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging("Phone");
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Storage = "_Fax", DbType = "nvarchar(24)")]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging("Fax");
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerCustomerDemo in the schema.
        /// </summary>
        [Association(Name="Customers_CustomerCustomerDemo", Storage="_CustomerCustomerDemo", ThisKey="CustomerID", OtherKey="CustomerID", DeleteRule="NO ACTION")]
        public EntitySet<CustomerCustomerDemo> CustomerCustomerDemo
        {
            get
            {
                return this._CustomerCustomerDemo;
            }
            set
            {
                this._CustomerCustomerDemo.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [Association(Name="Customers_Orders", Storage="_Orders", ThisKey="CustomerID", OtherKey="CustomerID", DeleteRule="NO ACTION")]
        public EntitySet<Orders> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CustomerCustomerDemo(CustomerCustomerDemo entity)
        {
            this.SendPropertyChanging();
            entity.Customers = this;
        }
    
        private void detach_CustomerCustomerDemo(CustomerCustomerDemo entity)
        {
            this.SendPropertyChanging();
            entity.Customers = null;
        }

        private void attach_Orders(Orders entity)
        {
            this.SendPropertyChanging();
            entity.Customers = this;
        }
    
        private void detach_Orders(Orders entity)
        {
            this.SendPropertyChanging();
            entity.Customers = null;
        }
    }

    /// <summary>
    /// There are no comments for DbContext.Employees in the schema.
    /// </summary>
    [Table(Name = @"dbo.Employees")]
    public partial class Employees : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EmployeeID;

        private string _LastName;

        private string _FirstName;

        private string _Title;

        private string _TitleOfCourtesy;

        private System.Nullable<System.DateTime> _BirthDate;

        private System.Nullable<System.DateTime> _HireDate;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _HomePhone;

        private string _Extension;

        private byte[] _Photo;

        private string _Notes;

        private System.Nullable<int> _ReportsTo;

        private string _PhotoPath;
        #pragma warning restore 0649

        private EntitySet<Employees> _Employees_ReportsTo1;

        private EntityRef<Employees> _Employees_ReportsTo;

        private EntitySet<EmployeeTerritories> _EmployeeTerritories;

        private EntitySet<Orders> _Orders;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIDChanging(int value);
        partial void OnEmployeeIDChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTitleOfCourtesyChanging(string value);
        partial void OnTitleOfCourtesyChanged();
        partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
        partial void OnBirthDateChanged();
        partial void OnHireDateChanging(System.Nullable<System.DateTime> value);
        partial void OnHireDateChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnHomePhoneChanging(string value);
        partial void OnHomePhoneChanged();
        partial void OnExtensionChanging(string value);
        partial void OnExtensionChanged();
        partial void OnPhotoChanging(byte[] value);
        partial void OnPhotoChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnReportsToChanging(System.Nullable<int> value);
        partial void OnReportsToChanged();
        partial void OnPhotoPathChanging(string value);
        partial void OnPhotoPathChanged();
        #endregion

        public Employees()
        {
            this._Employees_ReportsTo1 = new EntitySet<Employees>(new Action<Employees>(this.attach_Employees_ReportsTo1), new Action<Employees>(this.detach_Employees_ReportsTo1));
            this._Employees_ReportsTo  = default(EntityRef<Employees>);
            this._EmployeeTerritories = new EntitySet<EmployeeTerritories>(new Action<EmployeeTerritories>(this.attach_EmployeeTerritories), new Action<EmployeeTerritories>(this.detach_EmployeeTerritories));
            this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeID in the schema.
        /// </summary>
        [Column(Storage = "_EmployeeID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int EmployeeID
        {
            get
            {
                return this._EmployeeID;
            }
            set
            {
                if (this._EmployeeID != value)
                {
                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging("EmployeeID");
                    this._EmployeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Storage = "_LastName", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging("LastName");
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Storage = "_FirstName", CanBeNull = false, DbType = "nvarchar(10) NOT NULL")]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging("FirstName");
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Storage = "_Title", DbType = "nvarchar(30)")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging("Title");
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TitleOfCourtesy in the schema.
        /// </summary>
        [Column(Storage = "_TitleOfCourtesy", DbType = "nvarchar(25)")]
        public string TitleOfCourtesy
        {
            get
            {
                return this._TitleOfCourtesy;
            }
            set
            {
                if (this._TitleOfCourtesy != value)
                {
                    this.OnTitleOfCourtesyChanging(value);
                    this.SendPropertyChanging("TitleOfCourtesy");
                    this._TitleOfCourtesy = value;
                    this.SendPropertyChanged("TitleOfCourtesy");
                    this.OnTitleOfCourtesyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BirthDate in the schema.
        /// </summary>
        [Column(Storage = "_BirthDate", DbType = "datetime2")]
        public System.Nullable<System.DateTime> BirthDate
        {
            get
            {
                return this._BirthDate;
            }
            set
            {
                if (this._BirthDate != value)
                {
                    this.OnBirthDateChanging(value);
                    this.SendPropertyChanging("BirthDate");
                    this._BirthDate = value;
                    this.SendPropertyChanged("BirthDate");
                    this.OnBirthDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HireDate in the schema.
        /// </summary>
        [Column(Storage = "_HireDate", DbType = "datetime2")]
        public System.Nullable<System.DateTime> HireDate
        {
            get
            {
                return this._HireDate;
            }
            set
            {
                if (this._HireDate != value)
                {
                    this.OnHireDateChanging(value);
                    this.SendPropertyChanging("HireDate");
                    this._HireDate = value;
                    this.SendPropertyChanged("HireDate");
                    this.OnHireDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Storage = "_Address", DbType = "nvarchar(60)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Storage = "_City", DbType = "nvarchar(15)")]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging("City");
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Column(Storage = "_Region", DbType = "nvarchar(15)")]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging("Region");
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostalCode in the schema.
        /// </summary>
        [Column(Storage = "_PostalCode", DbType = "nvarchar(10)")]
        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if (this._PostalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging("PostalCode");
                    this._PostalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Storage = "_Country", DbType = "nvarchar(15)")]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging("Country");
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HomePhone in the schema.
        /// </summary>
        [Column(Storage = "_HomePhone", DbType = "nvarchar(24)")]
        public string HomePhone
        {
            get
            {
                return this._HomePhone;
            }
            set
            {
                if (this._HomePhone != value)
                {
                    this.OnHomePhoneChanging(value);
                    this.SendPropertyChanging("HomePhone");
                    this._HomePhone = value;
                    this.SendPropertyChanged("HomePhone");
                    this.OnHomePhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Extension in the schema.
        /// </summary>
        [Column(Storage = "_Extension", DbType = "nvarchar(4)")]
        public string Extension
        {
            get
            {
                return this._Extension;
            }
            set
            {
                if (this._Extension != value)
                {
                    this.OnExtensionChanging(value);
                    this.SendPropertyChanging("Extension");
                    this._Extension = value;
                    this.SendPropertyChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Photo in the schema.
        /// </summary>
        [Column(Storage = "_Photo", DbType = "varbinary(MAX)", UpdateCheck = UpdateCheck.Never)]
        public byte[] Photo
        {
            get
            {
                return this._Photo;
            }
            set
            {
                if (this._Photo != value)
                {
                    this.OnPhotoChanging(value);
                    this.SendPropertyChanging("Photo");
                    this._Photo = value;
                    this.SendPropertyChanged("Photo");
                    this.OnPhotoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [Column(Storage = "_Notes", DbType = "nvarchar(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging("Notes");
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReportsTo in the schema.
        /// </summary>
        [Column(Storage = "_ReportsTo", DbType = "int")]
        public System.Nullable<int> ReportsTo
        {
            get
            {
                return this._ReportsTo;
            }
            set
            {
                if (this._ReportsTo != value)
                {
                    if (this._Employees_ReportsTo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnReportsToChanging(value);
                    this.SendPropertyChanging("ReportsTo");
                    this._ReportsTo = value;
                    this.SendPropertyChanged("ReportsTo");
                    this.OnReportsToChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhotoPath in the schema.
        /// </summary>
        [Column(Storage = "_PhotoPath", DbType = "nvarchar(255)")]
        public string PhotoPath
        {
            get
            {
                return this._PhotoPath;
            }
            set
            {
                if (this._PhotoPath != value)
                {
                    this.OnPhotoPathChanging(value);
                    this.SendPropertyChanging("PhotoPath");
                    this._PhotoPath = value;
                    this.SendPropertyChanged("PhotoPath");
                    this.OnPhotoPathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employees_ReportsTo1 in the schema.
        /// </summary>
        [Association(Name="Employees_Employees", Storage="_Employees_ReportsTo1", ThisKey="EmployeeID", OtherKey="ReportsTo", DeleteRule="NO ACTION")]
        public EntitySet<Employees> Employees_ReportsTo1
        {
            get
            {
                return this._Employees_ReportsTo1;
            }
            set
            {
                this._Employees_ReportsTo1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Employees_ReportsTo in the schema.
        /// </summary>
        [Association(Name="Employees_Employees", Storage="_Employees_ReportsTo", ThisKey="ReportsTo", OtherKey="EmployeeID", IsForeignKey=true)]
        public Employees Employees_ReportsTo
        {
            get
            {
                return this._Employees_ReportsTo.Entity;
            }
            set
            {
                Employees previousValue = this._Employees_ReportsTo.Entity;
                if ((previousValue != value) || (this._Employees_ReportsTo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Employees_ReportsTo");
                    if (previousValue != null)
                    {
                        this._Employees_ReportsTo.Entity = null;
                        previousValue.Employees_ReportsTo1.Remove(this);
                    }
                    this._Employees_ReportsTo.Entity = value;
                    if (value != null)
                    {
                        this._ReportsTo = value.EmployeeID;
                        value.Employees_ReportsTo1.Add(this);
                    }
                    else
                    {
                        this._ReportsTo = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Employees_ReportsTo");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeTerritories in the schema.
        /// </summary>
        [Association(Name="Employees_EmployeeTerritories", Storage="_EmployeeTerritories", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
        public EntitySet<EmployeeTerritories> EmployeeTerritories
        {
            get
            {
                return this._EmployeeTerritories;
            }
            set
            {
                this._EmployeeTerritories.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [Association(Name="Employees_Orders", Storage="_Orders", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
        public EntitySet<Orders> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Employees_ReportsTo1(Employees entity)
        {
            this.SendPropertyChanging();
            entity.Employees_ReportsTo = this;
        }
    
        private void detach_Employees_ReportsTo1(Employees entity)
        {
            this.SendPropertyChanging();
            entity.Employees_ReportsTo = null;
        }

        private void attach_EmployeeTerritories(EmployeeTerritories entity)
        {
            this.SendPropertyChanging();
            entity.Employees = this;
        }
    
        private void detach_EmployeeTerritories(EmployeeTerritories entity)
        {
            this.SendPropertyChanging();
            entity.Employees = null;
        }

        private void attach_Orders(Orders entity)
        {
            this.SendPropertyChanging();
            entity.Employees = this;
        }
    
        private void detach_Orders(Orders entity)
        {
            this.SendPropertyChanging();
            entity.Employees = null;
        }
    }

    /// <summary>
    /// There are no comments for DbContext.EmployeeTerritories in the schema.
    /// </summary>
    [Table(Name = @"dbo.EmployeeTerritories")]
    public partial class EmployeeTerritories : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EmployeeID;

        private string _TerritoryID;
        #pragma warning restore 0649

        private EntityRef<Employees> _Employees;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIDChanging(int value);
        partial void OnEmployeeIDChanged();
        partial void OnTerritoryIDChanging(string value);
        partial void OnTerritoryIDChanged();
        #endregion

        public EmployeeTerritories()
        {
            this._Employees  = default(EntityRef<Employees>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeID in the schema.
        /// </summary>
        [Column(Storage = "_EmployeeID", CanBeNull = false, DbType = "int NOT NULL", IsPrimaryKey = true)]
        public int EmployeeID
        {
            get
            {
                return this._EmployeeID;
            }
            set
            {
                if (this._EmployeeID != value)
                {
                    if (this._Employees.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging("EmployeeID");
                    this._EmployeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TerritoryID in the schema.
        /// </summary>
        [Column(Storage = "_TerritoryID", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        public string TerritoryID
        {
            get
            {
                return this._TerritoryID;
            }
            set
            {
                if (this._TerritoryID != value)
                {
                    this.OnTerritoryIDChanging(value);
                    this.SendPropertyChanging("TerritoryID");
                    this._TerritoryID = value;
                    this.SendPropertyChanged("TerritoryID");
                    this.OnTerritoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [Association(Name="Employees_EmployeeTerritories", Storage="_Employees", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
        public Employees Employees
        {
            get
            {
                return this._Employees.Entity;
            }
            set
            {
                Employees previousValue = this._Employees.Entity;
                if ((previousValue != value) || (this._Employees.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Employees");
                    if (previousValue != null)
                    {
                        this._Employees.Entity = null;
                        previousValue.EmployeeTerritories.Remove(this);
                    }
                    this._Employees.Entity = value;
                    if (value != null)
                    {
                        this._EmployeeID = value.EmployeeID;
                        value.EmployeeTerritories.Add(this);
                    }
                    else
                    {
                        this._EmployeeID = default(int);
                    }
                    this.SendPropertyChanged("Employees");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DbContext.OrderDetails in the schema.
    /// </summary>
    [Table(Name = @"dbo.[Order Details]")]
    public partial class OrderDetails : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderID;

        private int _ProductID;

        private decimal _UnitPrice = 0m;

        private short _Quantity = 1;

        private float _Discount = 0f;
        #pragma warning restore 0649

        private EntityRef<Orders> _Orders;

        private EntityRef<Products> _Products;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnUnitPriceChanging(decimal value);
        partial void OnUnitPriceChanged();
        partial void OnQuantityChanging(short value);
        partial void OnQuantityChanged();
        partial void OnDiscountChanging(float value);
        partial void OnDiscountChanged();
        #endregion

        public OrderDetails()
        {
            this._Orders  = default(EntityRef<Orders>);
            this._Products  = default(EntityRef<Products>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderID in the schema.
        /// </summary>
        [Column(Storage = "_OrderID", CanBeNull = false, DbType = "int NOT NULL", IsPrimaryKey = true)]
        public int OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if (this._OrderID != value)
                {
                    if (this._Orders.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging("OrderID");
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", CanBeNull = false, DbType = "int NOT NULL", IsPrimaryKey = true)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    if (this._Products.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging("ProductID");
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitPrice in the schema.
        /// </summary>
        [Column(Storage = "_UnitPrice", CanBeNull = false, DbType = "decimal(19,4) NOT NULL")]
        public decimal UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this.SendPropertyChanging("UnitPrice");
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Storage = "_Quantity", CanBeNull = false, DbType = "smallint NOT NULL")]
        public short Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging("Quantity");
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Discount in the schema.
        /// </summary>
        [Column(Storage = "_Discount", CanBeNull = false, DbType = "real NOT NULL")]
        public float Discount
        {
            get
            {
                return this._Discount;
            }
            set
            {
                if (this._Discount != value)
                {
                    this.OnDiscountChanging(value);
                    this.SendPropertyChanging("Discount");
                    this._Discount = value;
                    this.SendPropertyChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [Association(Name="Orders_OrderDetails", Storage="_Orders", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
        public Orders Orders
        {
            get
            {
                return this._Orders.Entity;
            }
            set
            {
                Orders previousValue = this._Orders.Entity;
                if ((previousValue != value) || (this._Orders.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Orders");
                    if (previousValue != null)
                    {
                        this._Orders.Entity = null;
                        previousValue.OrderDetails.Remove(this);
                    }
                    this._Orders.Entity = value;
                    if (value != null)
                    {
                        this._OrderID = value.OrderID;
                        value.OrderDetails.Add(this);
                    }
                    else
                    {
                        this._OrderID = default(int);
                    }
                    this.SendPropertyChanged("Orders");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Association(Name="Products_OrderDetails", Storage="_Products", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
        public Products Products
        {
            get
            {
                return this._Products.Entity;
            }
            set
            {
                Products previousValue = this._Products.Entity;
                if ((previousValue != value) || (this._Products.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Products");
                    if (previousValue != null)
                    {
                        this._Products.Entity = null;
                        previousValue.OrderDetails.Remove(this);
                    }
                    this._Products.Entity = value;
                    if (value != null)
                    {
                        this._ProductID = value.ProductID;
                        value.OrderDetails.Add(this);
                    }
                    else
                    {
                        this._ProductID = default(int);
                    }
                    this.SendPropertyChanged("Products");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DbContext.Orders in the schema.
    /// </summary>
    [Table(Name = @"dbo.Orders")]
    public partial class Orders : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderID;

        private string _CustomerID;

        private System.Nullable<int> _EmployeeID;

        private System.Nullable<System.DateTime> _OrderDate;

        private System.Nullable<System.DateTime> _RequiredDate;

        private System.Nullable<System.DateTime> _ShippedDate;

        private System.Nullable<int> _ShipVia;

        private System.Nullable<decimal> _Freight = 0m;

        private string _ShipName;

        private string _ShipAddress;

        private string _ShipCity;

        private string _ShipRegion;

        private string _ShipPostalCode;

        private string _ShipCountry;
        #pragma warning restore 0649

        private EntitySet<OrderDetails> _OrderDetails;

        private EntityRef<Customers> _Customers;

        private EntityRef<Employees> _Employees;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnCustomerIDChanging(string value);
        partial void OnCustomerIDChanged();
        partial void OnEmployeeIDChanging(System.Nullable<int> value);
        partial void OnEmployeeIDChanged();
        partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
        partial void OnOrderDateChanged();
        partial void OnRequiredDateChanging(System.Nullable<System.DateTime> value);
        partial void OnRequiredDateChanged();
        partial void OnShippedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnShippedDateChanged();
        partial void OnShipViaChanging(System.Nullable<int> value);
        partial void OnShipViaChanged();
        partial void OnFreightChanging(System.Nullable<decimal> value);
        partial void OnFreightChanged();
        partial void OnShipNameChanging(string value);
        partial void OnShipNameChanged();
        partial void OnShipAddressChanging(string value);
        partial void OnShipAddressChanged();
        partial void OnShipCityChanging(string value);
        partial void OnShipCityChanged();
        partial void OnShipRegionChanging(string value);
        partial void OnShipRegionChanged();
        partial void OnShipPostalCodeChanging(string value);
        partial void OnShipPostalCodeChanged();
        partial void OnShipCountryChanging(string value);
        partial void OnShipCountryChanged();
        #endregion

        public Orders()
        {
            this._OrderDetails = new EntitySet<OrderDetails>(new Action<OrderDetails>(this.attach_OrderDetails), new Action<OrderDetails>(this.detach_OrderDetails));
            this._Customers  = default(EntityRef<Customers>);
            this._Employees  = default(EntityRef<Employees>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderID in the schema.
        /// </summary>
        [Column(Storage = "_OrderID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if (this._OrderID != value)
                {
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging("OrderID");
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerID in the schema.
        /// </summary>
        [Column(Storage = "_CustomerID", DbType = "nchar(5)")]
        public string CustomerID
        {
            get
            {
                return this._CustomerID;
            }
            set
            {
                if (this._CustomerID != value)
                {
                    if (this._Customers.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging("CustomerID");
                    this._CustomerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeID in the schema.
        /// </summary>
        [Column(Storage = "_EmployeeID", DbType = "int")]
        public System.Nullable<int> EmployeeID
        {
            get
            {
                return this._EmployeeID;
            }
            set
            {
                if (this._EmployeeID != value)
                {
                    if (this._Employees.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging("EmployeeID");
                    this._EmployeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderDate in the schema.
        /// </summary>
        [Column(Storage = "_OrderDate", DbType = "datetime2")]
        public System.Nullable<System.DateTime> OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging("OrderDate");
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequiredDate in the schema.
        /// </summary>
        [Column(Storage = "_RequiredDate", DbType = "datetime2")]
        public System.Nullable<System.DateTime> RequiredDate
        {
            get
            {
                return this._RequiredDate;
            }
            set
            {
                if (this._RequiredDate != value)
                {
                    this.OnRequiredDateChanging(value);
                    this.SendPropertyChanging("RequiredDate");
                    this._RequiredDate = value;
                    this.SendPropertyChanged("RequiredDate");
                    this.OnRequiredDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippedDate in the schema.
        /// </summary>
        [Column(Storage = "_ShippedDate", DbType = "datetime2")]
        public System.Nullable<System.DateTime> ShippedDate
        {
            get
            {
                return this._ShippedDate;
            }
            set
            {
                if (this._ShippedDate != value)
                {
                    this.OnShippedDateChanging(value);
                    this.SendPropertyChanging("ShippedDate");
                    this._ShippedDate = value;
                    this.SendPropertyChanged("ShippedDate");
                    this.OnShippedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipVia in the schema.
        /// </summary>
        [Column(Storage = "_ShipVia", DbType = "int")]
        public System.Nullable<int> ShipVia
        {
            get
            {
                return this._ShipVia;
            }
            set
            {
                if (this._ShipVia != value)
                {
                    this.OnShipViaChanging(value);
                    this.SendPropertyChanging("ShipVia");
                    this._ShipVia = value;
                    this.SendPropertyChanged("ShipVia");
                    this.OnShipViaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Freight in the schema.
        /// </summary>
        [Column(Storage = "_Freight", DbType = "decimal(19,4)")]
        public System.Nullable<decimal> Freight
        {
            get
            {
                return this._Freight;
            }
            set
            {
                if (this._Freight != value)
                {
                    this.OnFreightChanging(value);
                    this.SendPropertyChanging("Freight");
                    this._Freight = value;
                    this.SendPropertyChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipName in the schema.
        /// </summary>
        [Column(Storage = "_ShipName", DbType = "nvarchar(40)")]
        public string ShipName
        {
            get
            {
                return this._ShipName;
            }
            set
            {
                if (this._ShipName != value)
                {
                    this.OnShipNameChanging(value);
                    this.SendPropertyChanging("ShipName");
                    this._ShipName = value;
                    this.SendPropertyChanged("ShipName");
                    this.OnShipNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipAddress in the schema.
        /// </summary>
        [Column(Storage = "_ShipAddress", DbType = "nvarchar(60)")]
        public string ShipAddress
        {
            get
            {
                return this._ShipAddress;
            }
            set
            {
                if (this._ShipAddress != value)
                {
                    this.OnShipAddressChanging(value);
                    this.SendPropertyChanging("ShipAddress");
                    this._ShipAddress = value;
                    this.SendPropertyChanged("ShipAddress");
                    this.OnShipAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipCity in the schema.
        /// </summary>
        [Column(Storage = "_ShipCity", DbType = "nvarchar(15)")]
        public string ShipCity
        {
            get
            {
                return this._ShipCity;
            }
            set
            {
                if (this._ShipCity != value)
                {
                    this.OnShipCityChanging(value);
                    this.SendPropertyChanging("ShipCity");
                    this._ShipCity = value;
                    this.SendPropertyChanged("ShipCity");
                    this.OnShipCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipRegion in the schema.
        /// </summary>
        [Column(Storage = "_ShipRegion", DbType = "nvarchar(15)")]
        public string ShipRegion
        {
            get
            {
                return this._ShipRegion;
            }
            set
            {
                if (this._ShipRegion != value)
                {
                    this.OnShipRegionChanging(value);
                    this.SendPropertyChanging("ShipRegion");
                    this._ShipRegion = value;
                    this.SendPropertyChanged("ShipRegion");
                    this.OnShipRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipPostalCode in the schema.
        /// </summary>
        [Column(Storage = "_ShipPostalCode", DbType = "nvarchar(10)")]
        public string ShipPostalCode
        {
            get
            {
                return this._ShipPostalCode;
            }
            set
            {
                if (this._ShipPostalCode != value)
                {
                    this.OnShipPostalCodeChanging(value);
                    this.SendPropertyChanging("ShipPostalCode");
                    this._ShipPostalCode = value;
                    this.SendPropertyChanged("ShipPostalCode");
                    this.OnShipPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipCountry in the schema.
        /// </summary>
        [Column(Storage = "_ShipCountry", DbType = "nvarchar(15)")]
        public string ShipCountry
        {
            get
            {
                return this._ShipCountry;
            }
            set
            {
                if (this._ShipCountry != value)
                {
                    this.OnShipCountryChanging(value);
                    this.SendPropertyChanging("ShipCountry");
                    this._ShipCountry = value;
                    this.SendPropertyChanged("ShipCountry");
                    this.OnShipCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderDetails in the schema.
        /// </summary>
        [Association(Name="Orders_OrderDetails", Storage="_OrderDetails", ThisKey="OrderID", OtherKey="OrderID", DeleteRule="NO ACTION")]
        public EntitySet<OrderDetails> OrderDetails
        {
            get
            {
                return this._OrderDetails;
            }
            set
            {
                this._OrderDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Customers in the schema.
        /// </summary>
        [Association(Name="Customers_Orders", Storage="_Customers", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
        public Customers Customers
        {
            get
            {
                return this._Customers.Entity;
            }
            set
            {
                Customers previousValue = this._Customers.Entity;
                if ((previousValue != value) || (this._Customers.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Customers");
                    if (previousValue != null)
                    {
                        this._Customers.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._Customers.Entity = value;
                    if (value != null)
                    {
                        this._CustomerID = value.CustomerID;
                        value.Orders.Add(this);
                    }
                    else
                    {
                        this._CustomerID = default(string);
                    }
                    this.SendPropertyChanged("Customers");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [Association(Name="Employees_Orders", Storage="_Employees", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
        public Employees Employees
        {
            get
            {
                return this._Employees.Entity;
            }
            set
            {
                Employees previousValue = this._Employees.Entity;
                if ((previousValue != value) || (this._Employees.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Employees");
                    if (previousValue != null)
                    {
                        this._Employees.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._Employees.Entity = value;
                    if (value != null)
                    {
                        this._EmployeeID = value.EmployeeID;
                        value.Orders.Add(this);
                    }
                    else
                    {
                        this._EmployeeID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Employees");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderDetails(OrderDetails entity)
        {
            this.SendPropertyChanging();
            entity.Orders = this;
        }
    
        private void detach_OrderDetails(OrderDetails entity)
        {
            this.SendPropertyChanging();
            entity.Orders = null;
        }
    }

    /// <summary>
    /// There are no comments for DbContext.Products in the schema.
    /// </summary>
    [Table(Name = @"dbo.Products")]
    public partial class Products : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductID;

        private string _ProductName;

        private System.Nullable<int> _SupplierID;

        private System.Nullable<int> _CategoryID;

        private string _QuantityPerUnit;

        private System.Nullable<decimal> _UnitPrice = 0m;

        private System.Nullable<short> _UnitsInStock = 0;

        private System.Nullable<short> _UnitsOnOrder = 0;

        private System.Nullable<short> _ReorderLevel = 0;

        private bool _Discontinued = false;
        #pragma warning restore 0649

        private EntitySet<OrderDetails> _OrderDetails;

        private EntityRef<Categories> _Categories;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnSupplierIDChanging(System.Nullable<int> value);
        partial void OnSupplierIDChanged();
        partial void OnCategoryIDChanging(System.Nullable<int> value);
        partial void OnCategoryIDChanged();
        partial void OnQuantityPerUnitChanging(string value);
        partial void OnQuantityPerUnitChanged();
        partial void OnUnitPriceChanging(System.Nullable<decimal> value);
        partial void OnUnitPriceChanged();
        partial void OnUnitsInStockChanging(System.Nullable<short> value);
        partial void OnUnitsInStockChanged();
        partial void OnUnitsOnOrderChanging(System.Nullable<short> value);
        partial void OnUnitsOnOrderChanged();
        partial void OnReorderLevelChanging(System.Nullable<short> value);
        partial void OnReorderLevelChanged();
        partial void OnDiscontinuedChanging(bool value);
        partial void OnDiscontinuedChanged();
        #endregion

        public Products()
        {
            this._OrderDetails = new EntitySet<OrderDetails>(new Action<OrderDetails>(this.attach_OrderDetails), new Action<OrderDetails>(this.detach_OrderDetails));
            this._Categories  = default(EntityRef<Categories>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging("ProductID");
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Storage = "_ProductName", CanBeNull = false, DbType = "nvarchar(40) NOT NULL")]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging("ProductName");
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierID in the schema.
        /// </summary>
        [Column(Storage = "_SupplierID", DbType = "int")]
        public System.Nullable<int> SupplierID
        {
            get
            {
                return this._SupplierID;
            }
            set
            {
                if (this._SupplierID != value)
                {
                    this.OnSupplierIDChanging(value);
                    this.SendPropertyChanging("SupplierID");
                    this._SupplierID = value;
                    this.SendPropertyChanged("SupplierID");
                    this.OnSupplierIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryID in the schema.
        /// </summary>
        [Column(Storage = "_CategoryID", DbType = "int")]
        public System.Nullable<int> CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    if (this._Categories.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging("CategoryID");
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuantityPerUnit in the schema.
        /// </summary>
        [Column(Storage = "_QuantityPerUnit", DbType = "nvarchar(20)")]
        public string QuantityPerUnit
        {
            get
            {
                return this._QuantityPerUnit;
            }
            set
            {
                if (this._QuantityPerUnit != value)
                {
                    this.OnQuantityPerUnitChanging(value);
                    this.SendPropertyChanging("QuantityPerUnit");
                    this._QuantityPerUnit = value;
                    this.SendPropertyChanged("QuantityPerUnit");
                    this.OnQuantityPerUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitPrice in the schema.
        /// </summary>
        [Column(Storage = "_UnitPrice", DbType = "decimal(19,4)")]
        public System.Nullable<decimal> UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this.SendPropertyChanging("UnitPrice");
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsInStock in the schema.
        /// </summary>
        [Column(Storage = "_UnitsInStock", DbType = "smallint")]
        public System.Nullable<short> UnitsInStock
        {
            get
            {
                return this._UnitsInStock;
            }
            set
            {
                if (this._UnitsInStock != value)
                {
                    this.OnUnitsInStockChanging(value);
                    this.SendPropertyChanging("UnitsInStock");
                    this._UnitsInStock = value;
                    this.SendPropertyChanged("UnitsInStock");
                    this.OnUnitsInStockChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOnOrder in the schema.
        /// </summary>
        [Column(Storage = "_UnitsOnOrder", DbType = "smallint")]
        public System.Nullable<short> UnitsOnOrder
        {
            get
            {
                return this._UnitsOnOrder;
            }
            set
            {
                if (this._UnitsOnOrder != value)
                {
                    this.OnUnitsOnOrderChanging(value);
                    this.SendPropertyChanging("UnitsOnOrder");
                    this._UnitsOnOrder = value;
                    this.SendPropertyChanged("UnitsOnOrder");
                    this.OnUnitsOnOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReorderLevel in the schema.
        /// </summary>
        [Column(Storage = "_ReorderLevel", DbType = "smallint")]
        public System.Nullable<short> ReorderLevel
        {
            get
            {
                return this._ReorderLevel;
            }
            set
            {
                if (this._ReorderLevel != value)
                {
                    this.OnReorderLevelChanging(value);
                    this.SendPropertyChanging("ReorderLevel");
                    this._ReorderLevel = value;
                    this.SendPropertyChanged("ReorderLevel");
                    this.OnReorderLevelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Discontinued in the schema.
        /// </summary>
        [Column(Storage = "_Discontinued", CanBeNull = false, DbType = "bit NOT NULL")]
        public bool Discontinued
        {
            get
            {
                return this._Discontinued;
            }
            set
            {
                if (this._Discontinued != value)
                {
                    this.OnDiscontinuedChanging(value);
                    this.SendPropertyChanging("Discontinued");
                    this._Discontinued = value;
                    this.SendPropertyChanged("Discontinued");
                    this.OnDiscontinuedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderDetails in the schema.
        /// </summary>
        [Association(Name="Products_OrderDetails", Storage="_OrderDetails", ThisKey="ProductID", OtherKey="ProductID", DeleteRule="NO ACTION")]
        public EntitySet<OrderDetails> OrderDetails
        {
            get
            {
                return this._OrderDetails;
            }
            set
            {
                this._OrderDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Categories in the schema.
        /// </summary>
        [Association(Name="Categories_Products", Storage="_Categories", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
        public Categories Categories
        {
            get
            {
                return this._Categories.Entity;
            }
            set
            {
                Categories previousValue = this._Categories.Entity;
                if ((previousValue != value) || (this._Categories.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Categories");
                    if (previousValue != null)
                    {
                        this._Categories.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Categories.Entity = value;
                    if (value != null)
                    {
                        this._CategoryID = value.CategoryID;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._CategoryID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Categories");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderDetails(OrderDetails entity)
        {
            this.SendPropertyChanging();
            entity.Products = this;
        }
    
        private void detach_OrderDetails(OrderDetails entity)
        {
            this.SendPropertyChanging();
            entity.Products = null;
        }
    }

    /// <summary>
    /// There are no comments for DbContext.Region in the schema.
    /// </summary>
    [Table(Name = @"dbo.Regions")]
    public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RegionID;

        private string _RegionDescription;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRegionIDChanging(int value);
        partial void OnRegionIDChanged();
        partial void OnRegionDescriptionChanging(string value);
        partial void OnRegionDescriptionChanged();
        #endregion

        public Region()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RegionID in the schema.
        /// </summary>
        [Column(Storage = "_RegionID", CanBeNull = false, DbType = "int NOT NULL", IsPrimaryKey = true)]
        public int RegionID
        {
            get
            {
                return this._RegionID;
            }
            set
            {
                if (this._RegionID != value)
                {
                    this.OnRegionIDChanging(value);
                    this.SendPropertyChanging("RegionID");
                    this._RegionID = value;
                    this.SendPropertyChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegionDescription in the schema.
        /// </summary>
        [Column(Storage = "_RegionDescription", CanBeNull = false, DbType = "nchar(50) NOT NULL")]
        public string RegionDescription
        {
            get
            {
                return this._RegionDescription;
            }
            set
            {
                if (this._RegionDescription != value)
                {
                    this.OnRegionDescriptionChanging(value);
                    this.SendPropertyChanging("RegionDescription");
                    this._RegionDescription = value;
                    this.SendPropertyChanged("RegionDescription");
                    this.OnRegionDescriptionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
